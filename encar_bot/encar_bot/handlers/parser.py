"""
–•—ç–Ω–¥–ª–µ—Ä—ã –ø–∞—Ä—Å–µ—Ä–∞ —Å —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
"""

import logging

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import InputMediaPhoto

from encar_bot.keyboards import get_car_link_keyboard
from encar_bot.states import ParserStates
from encar_bot.utils.formatters import format_car_images, format_car_info
from encar_bot.utils.parser import extract_car_id, run_encar_parser

parser_router = Router()
logger = logging.getLogger(__name__)


@parser_router.message(ParserStates.waiting_for_link, F.text)
async def process_link(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏"""
    url = message.text.strip()  # type: ignore

    # –í–∞–ª–∏–¥–∞—Ü–∏—è URL
    if not url.startswith("http"):
        await message.answer(
            "‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å Encar.", parse_mode="HTML"
        )
        return

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID
    car_id = extract_car_id(url)
    if not car_id:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ —Å—Å—ã–ª–∫–∏.\n\n"
            "–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:\n"
            "<code>https://fem.encar.com/cars/detail/40647630?carid=40647630</code>",
            parse_mode="HTML",
        )
        return

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ
    processing_msg = await message.answer(
        f"üîç –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ...\n"
        f"üÜî ID: <code>{car_id}</code>\n"
        f"‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 10-30 —Å–µ–∫—É–Ω–¥...",
        parse_mode="HTML",
    )

    try:
        # –ó–ê–ü–£–°–ö –ü–ê–†–°–ï–†–ê
        car_data = await run_encar_parser(car_id)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        formatted_message = format_car_info(car_data)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await processing_msg.edit_text(formatted_message, parse_mode="HTML")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
        images = format_car_images(car_data)
        if images:
            media_group = [InputMediaPhoto(media=url) for url in images[:10]]
            try:
                await message.answer_media_group(media_group)  # type: ignore
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")

        # –ö–Ω–æ–ø–∫–∞ —Å–æ —Å—Å—ã–ª–∫–æ–π
        await message.answer(
            "‚úÖ –ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –æ–¥–Ω—É —Å—Å—ã–ª–∫—É –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.",
            reply_markup=get_car_link_keyboard(url),
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ car_id={car_id}: {e}", exc_info=True)
        await processing_msg.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:\n"
            f"<code>{str(e)}</code>\n\n"
            f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            f"‚Ä¢ –ê–≤—Ç–æ–º–æ–±–∏–ª—å —É–¥–∞–ª–µ–Ω —Å —Å–∞–π—Ç–∞\n"
            f"‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é\n"
            f"‚Ä¢ –ö–∞–ø—á–∞ –Ω–∞ —Å–∞–π—Ç–µ\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É.",
            parse_mode="HTML",
        )


@parser_router.message()
async def handle_other_messages(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "ü§î –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å Encar.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.",
        parse_mode="HTML",
    )
